버전관리와 commit-정리
1. 버전관리를 한다는건 어떤 의미일까?
자신이 사용하거나 쓴 글이나 데이터들을 보기 좋게 정리하는 거?
다시 이것들을 활용하기 쉽게 정리하는 거?
오류가 있는 부분이 있다면 쉽고 간편하게 수정하는 거?
한 눈에 알아볼 수 있게 정리한 것



2.작업내역 단위인 commit에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까?
어떤 파일인지 한 눈에 보고 알 수 있을 정도의 대략적인 제목등을 적는 거?
파일을 연상케 할 만한 것






3.지금까지 우리가 실습은 어떤 순서로 했었지?
폴더 만들고 그 안에 txt파일을 만들어 안에 내용을 적고 파일을 올린다
그 담에 commit기능을 이용하여 그 파일이나 폴더가 어떤 것인지를 설명하기 위한
내용이나 제목 등을 추가
부족한 것들이 있다면 txt파일에 추가로 수정해서 다시 그 파일에 어떤 부분이 추가하거나
수정했는지 commit을 이용하여 적는다
git 초기화하기 - add - commit


1. 버전관리를 한다는 건 어떤 의미일까?
    - 프로젝트 상태가 변경되는 정보를 알고 있다는 것입니다. Git 은 누가, 언제, 해당 시점의 프로젝트 상태를 기록해두기 때문에 버전 관리가 가능합니다.
2. 작업내역 단위인 commit 에는 어떤 정보가 포함되어 있어야 잘 버전관리를 할 수 있을까?
    - 누가, 언제, 무엇을 했는지가 필요하겠죠? 어떤 작업을 했는지 알려주는 작업 내역인 commit 메시지, 누가(author), commit 한 시간이 필요해요.
    - 그리고 commit 을 편하게 관리하기 위한 commit 아이디!  commit 아이디는 사용자 아이디처럼 commit 에 부여된 유일한 값!
3. 지금까지 우리가 실습은 어떤 순서로 했었지?
    - 기존의 프로젝트를 git 프로젝트로 만든다. - git 초기화(git initialize)
    - commit 할 파일들을 add(staging) 하고  commit 메시지 작성해서 commit!

commit : 현재 프로젝트의 상태를 저장하는 것
git 초기화 : 컴퓨터에 있는 프로젝트를 Git이 관리하는 프로젝트로 만들게 설정하는 것
add, staging : commit 에 반영할 파일을 선택하는 것
commit 메시지 : 작업내역이 어떤 것인지 알아볼 수 있게 적는 메시지
history를 통해 commit한 기록확인 가능

